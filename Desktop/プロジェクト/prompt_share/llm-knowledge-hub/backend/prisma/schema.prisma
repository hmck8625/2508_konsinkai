generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ユーザーテーブル
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  department  String
  role        String
  password    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // リレーション
  prompts     Prompt[]
  ratings     Rating[]
  usageLogs   UsageLog[]
  collections Collection[]
  comments    Comment[]
  
  @@map("users")
}

// プロンプトテーブル
model Prompt {
  id              String     @id @default(cuid())
  userId          String
  title           String
  content         String     @db.Text
  response        String?    @db.Text
  llmModel        String?
  category        String
  subcategory     String?
  difficulty      Difficulty @default(BEGINNER)
  tags            Json?
  qualityScore    Float?
  visibility      Visibility @default(PUBLIC)
  usageCount      Int        @default(0)
  averageRating   Float?
  totalRatings    Int        @default(0)
  estimatedTokens Int?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // リレーション
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  ratings      Rating[]
  templates    Template[]
  usageLogs    UsageLog[]
  collections  CollectionPrompt[]
  comments     Comment[]
  
  @@map("prompts")
}

// 評価テーブル
model Rating {
  id             String   @id @default(cuid())
  promptId       String
  userId         String
  usefulness     Int
  easeOfUse      Int
  resultQuality  Int
  timeSaved      Int?
  comment        String?  @db.Text
  improvements   String?  @db.Text
  createdAt      DateTime @default(now())

  // リレーション
  prompt Prompt @relation(fields: [promptId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([promptId, userId])
  @@map("ratings")
}

// テンプレートテーブル
model Template {
  id              String   @id @default(cuid())
  promptId        String
  templateContent String   @db.Text
  variables       Json
  usageGuide      String?  @db.Text
  usageCount      Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // リレーション
  prompt     Prompt       @relation(fields: [promptId], references: [id], onDelete: Cascade)
  usageLogs  TemplateUsageLog[]
  
  @@map("templates")
}

// 使用履歴テーブル
model UsageLog {
  id            String      @id @default(cuid())
  userId        String
  promptId      String
  executionType ExecutionType
  timeSaved     Int?
  createdAt     DateTime    @default(now())

  // リレーション
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt Prompt @relation(fields: [promptId], references: [id], onDelete: Cascade)
  
  @@map("usage_logs")
}

// テンプレート使用履歴テーブル
model TemplateUsageLog {
  id            String   @id @default(cuid())
  templateId    String
  userId        String
  variables     Json
  timeSaved     Int?
  createdAt     DateTime @default(now())

  // リレーション
  template Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  @@map("template_usage_logs")
}

// コレクションテーブル
model Collection {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?  @db.Text
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // リレーション
  user    User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompts CollectionPrompt[]
  
  @@map("collections")
}

// コレクション-プロンプト中間テーブル
model CollectionPrompt {
  id           String   @id @default(cuid())
  collectionId String
  promptId     String
  addedAt      DateTime @default(now())

  // リレーション
  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  prompt     Prompt     @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@unique([collectionId, promptId])
  @@map("collection_prompts")
}

// コメントテーブル
model Comment {
  id        String   @id @default(cuid())
  promptId  String
  userId    String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // リレーション
  prompt Prompt @relation(fields: [promptId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("comments")
}

// 拡張機能認証トークンテーブル
model ExtensionToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  
  @@map("extension_tokens")
}

// 会話データテーブル（拡張機能からの生データ）
model ConversationData {
  id              String   @id @default(cuid())
  sessionId       String
  userId          String
  platform        String
  model           String?
  prompt          String   @db.Text
  response        String   @db.Text
  tokensUsed      Int?
  responseTime    Float?
  url             String?
  tabTitle        String?
  userDepartment  String?
  detectedCategory String?
  autoTags        Json?
  metadata        Json?
  processed       Boolean  @default(false)
  createdAt       DateTime @default(now())
  
  @@map("conversation_data")
}

// Enum定義
enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum Visibility {
  PUBLIC
  DEPARTMENT
  PRIVATE
}

enum ExecutionType {
  PREVIEW
  COPY
  SEND
  TEMPLATE
}